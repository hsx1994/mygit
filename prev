
  CREATE OR REPLACE EDITIONABLE PROCEDURE "CP01"."CP_EASA_O_PREV_YR" 
(I_BATCH_PARAM IN Cp_Arch_Pkg_Hdr_Params.BATCH_PARAMRECTYPE,
I_APP_PARAM  IN Cp_Arch_Pkg_Hdr_Params.APP_PARAMTABTYPE,
IO_RETURN_CODE IN OUT NUMBER)
AS

/*
Modification History
   Code             Date              Resource                                      Description
MOD-001           24/07/2010      Michael J. Reyes           Changed the value of VAL_RESULT_TYPE_ICODE fron 'OV' to '01'
MOD-002           24/07/2010      Michael J. Reyes           New tables used. Change the absent_icode_1 to absent_icode
MOD-003           24/07/2010      Michael J. Reyes           Remove constraints because columns does not exists in the new table
MOD-004           24/07/2010      Michael J. Reyes           Replace CP_CUR_SCHOOL_SUBJECT to CP_CUR_SCHOOL_HIST_SUBJ
MOD-005           24/07/2010      Michael J. Reyes           Replace CP_STUD_HIST_RESULTS to CP_STUD_HIST_RES_AGGREGATES
MOD-006           24/07/2010      Michael J. Reyes           Replace CP_STUD_HIST_RESULTS to CP_STUD_HIST_RES_AGGREGATES
MOD-007           24/07/2010      Michael J. Reyes           Replace grade_name_1 to grade_name
MOD-008           24/07/2010      Michael J. Reyes           Replace CP_STUD_HIST_RESULTS to CP_STUD_HIST_RES_AGGREGATES
                                                             Replace CP_STUD_HIST_RESULT_DTLS to CP_STUD_HIST_RES_MARK
MOD-009           24/07/2010      Michael J. Reyes           Remove constraints because columns does not exists in the new table
MOD-010           24/07/2010      Michael J. Reyes           Replace CP_CUR_SCHOOL_SUBJECT to CP_CUR_SCHOOL_HIST_SUBJ
MOD-011           24/07/2010      Michael J. Reyes           Replace CP_STUD_HIST_RESULTS to CP_STUD_HIST_RES_AGGREGATES
                                                             Replace CP_STUD_HIST_RESULT_DTLS to CP_STUD_HIST_RES_MARK
MOD-012           24/07/2010      Michael J. Reyes           Remove constraints because columns does not exists in the new table
MOD-013           24/07/2010      Michael J. Reyes           Replace CP_CUR_SCHOOL_SUBJECT to CP_CUR_SCHOOL_HIST_SUBJ
*/

/*Declare Type here */
TYPE FIELD_LENGTH_TYPE IS		VARRAY(36) OF    NUMBER;

/*Declaration of Variables */
APPL_ERROR			EXCEPTION;
E_APPLERR                       EXCEPTION;
V_APPLERR_PARAM                 Cp_Arch_Pkg_Hdr_Params.APPL_ERR_PARAMRECTYPE;
V_DATAERR_PARAM                 Cp_Arch_Pkg_Hdr_Params.DATA_ERR_PARAMRECTYPE;
V_FIELD_LENGTH                  FIELD_LENGTH_TYPE := FIELD_LENGTH_TYPE();
V_OUT_FILE  		        UTL_FILE.FILE_TYPE;

V_FILE_INFO                     LONG;
--V_ERR_FILE_INFO                 VARCHAR2(12000);
V_OUT_FILENAME                  VARCHAR2(600);
V_ERR_CHK_CODE                  VARCHAR2(200);
V_ERR_TBL_CODE                  VARCHAR2(500);
V_DIRECTORY                     VARCHAR2(500);
V_EXTRACT_LEVEL                 VARCHAR2(2):= I_APP_PARAM(1);
V_FIELD_PARA			VARCHAR2(6);

V_RETURN_CODE	  	            NUMBER				:= 0;
V_FIELD_INDEX                       NUMBER				:= 1;
V_HEADER_WRITE			    NUMBER				:= 0;
V_REC_COUNT			    NUMBER				:= 0;
V_RET_CODE			    NUMBER;


/* CONSTANT VARIABLES */
						/* TABLE FIELD VALUE */
/*START <MOD-001>*/
VAL_RESULT_TYPE_ICODE			CONSTANT VARCHAR2(2)		:= '01';
/*END <MOD-001>*/
VAL_SUBJECT_LEVEL_ICODE			CONSTANT VARCHAR2(2)		:= '01';
VAL_STUDENT_STATUS_ICODE		CONSTANT VARCHAR2(1)		:= 'A';
VAL_SUBJECT_ACTIVE_IND			CONSTANT VARCHAR2(1)		:= 'Y';
/*MOD*/
VAL_CURRENT_DATE			CONSTANT VARCHAR2(10)		:= '_'||TO_CHAR(SYSDATE,'YYYYMMDD');
/*MOD*/
VAL_CURRENT_YEAR			CONSTANT VARCHAR2(5)		:= TO_CHAR(SYSDATE,'YYYY');
VAL_PREV_YEAR				CONSTANT VARCHAR2(5)		:= TO_CHAR(TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))-1);
VAL_TRANS_CODE_PRI			CONSTANT VARCHAR2(6)		:= 'EASA01';		-- File indicator to extract out columns name
VAL_TRANS_CODE_SEC			CONSTANT VARCHAR2(6)		:= 'EASA02';		-- File indicator to extract out columns name
VAL_TRANS_CODE_JC			CONSTANT VARCHAR2(6)		:= 'EASA03';		-- File indicator to extract out columns name
VAL_LEVEL_CODE_PRI_1			CONSTANT VARCHAR2(2)		:= '11';
VAL_LEVEL_CODE_PRI_2			CONSTANT VARCHAR2(2)		:= '12';
VAL_LEVEL_CODE_PRI_3			CONSTANT VARCHAR2(2)		:= '13';
VAL_LEVEL_CODE_PRI_4			CONSTANT VARCHAR2(2)		:= '14';
VAL_LEVEL_CODE_PRI_5			CONSTANT VARCHAR2(2)		:= '15';
VAL_LEVEL_CODE_PRI_6			CONSTANT VARCHAR2(2)		:= '16';
VAL_LEVEL_CODE_SEC_1			CONSTANT VARCHAR2(2)		:= '31';
VAL_LEVEL_CODE_SEC_2			CONSTANT VARCHAR2(2)		:= '32';
VAL_LEVEL_CODE_SEC_3			CONSTANT VARCHAR2(2)		:= '33';
VAL_LEVEL_CODE_SEC_4			CONSTANT VARCHAR2(2)		:= '34';
VAL_LEVEL_CODE_SEC_5			CONSTANT VARCHAR2(2)		:= '35';
VAL_LEVEL_CODE_JC_1			CONSTANT VARCHAR2(2)		:= '41';
VAL_LEVEL_CODE_JC_2			CONSTANT VARCHAR2(2)		:= '42';
VAL_LEVEL_CODE_JC_3			CONSTANT VARCHAR2(2)		:= '43';
VAL_VR_MC				CONSTANT NUMBER				:= '2';
VAL_VR					CONSTANT VARCHAR2(2)		:= 'VR';
VAL_MC					CONSTANT VARCHAR2(2)		:= 'MC';
VAL_GRADE_A				CONSTANT VARCHAR2(1)		:= 'A';
VAL_GRADE_B				CONSTANT VARCHAR2(1)		:= 'B';

VAL_PRI_FILE_NAME		        CONSTANT VARCHAR2(20)		:= 'PY' || VAL_PREV_YEAR||VAL_CURRENT_DATE;
VAL_SEC_FILE_NAME			CONSTANT VARCHAR2(20)		:= 'SY' || VAL_PREV_YEAR||VAL_CURRENT_DATE;
VAL_JC_FILE_NAME			CONSTANT VARCHAR2(20)		:= 'PUY'|| VAL_PREV_YEAR||VAL_CURRENT_DATE;
VAL_MAINLEVEL_JCCI			CONSTANT VARCHAR2(2)		:= 'J';
VAL_MAINLEVEL_SEC			CONSTANT VARCHAR2(2)		:= 'S';
VAL_MAINLEVEL_PRI			CONSTANT VARCHAR2(2)		:= 'P';
--VAL_LEAVE_OF_ABSENCE_IND		CONSTANT VARCHAR2()			:= 'N';
VAL_TXT					CONSTANT VARCHAR2(5)		:= '.txt';
VAL_RPAD_SPACE				CONSTANT VARCHAR2(2)		:= ' ';
VAL_WRITE				CONSTANT VARCHAR2(2)		:= 'W';
VAL_APPLICATION_ERROR			CONSTANT NUMBER				:= 100;
VAL_NULL_BATCH_PARAM			CONSTANT VARCHAR2(5)		:= '0018';
VAL_ERROR_RET_FIELD_LENGTH		CONSTANT VARCHAR2(5)		:= '0019';
VAL_ERR_BLK_CODE			CONSTANT VARCHAR2(30)		:= 'CP_EASA_O_PREV_YR';
VAL_NO_ERROR				CONSTANT NUMBER(1)			:= 0;
VAL_INCREMENT				CONSTANT NUMBER				:= 1;
VAL_CREATED_BY				CONSTANT VARCHAR2(20)		:= 'INTERFACE';
VAL_CP_OUTBOUND				CONSTANT VARCHAR2(50)		:= 'CP_INTF_OUTBOUND_LOOKUP';
VAL_FOOTER_TXT				CONSTANT VARCHAR2(20)		:= '-END OF FILE-';
VAL_HEADER_TXT				CONSTANT VARCHAR2(50)		:= 'Total Number of Records: ';

						/* CHECK POINT MESSAGES */
VAL_CHECK_LEVEL				CONSTANT VARCHAR2(100)		:= 'Check for Application Parameter';
VAL_GET_PRI_COUNT			CONSTANT VARCHAR2(100)		:= 'Retrieve total number of Pri student to be written on file';
VAL_GET_SEC_COUNT			CONSTANT VARCHAR2(100)		:= 'Retrieve total number of Sec student to be written on file';
VAL_GET_JC_COUNT			CONSTANT VARCHAR2(100)		:= 'Retrieve total number of JCs student to be written on file';
VAL_BATCH_PARAMETER			CONSTANT VARCHAR2(100)		:= 'Check input Batch Parameter';
VAL_OPEN_FILES				CONSTANT VARCHAR2(100)		:= 'Open Output files';
VAL_CLOSE_OUT_FILE			CONSTANT VARCHAR2(100)		:= 'Close Output file';
VAL_LOAD_FIELD_LENGTHS			CONSTANT VARCHAR2(100)		:= 'Load Field lengths from INTF_OUTBOUND_LOOKUP';
VAL_CHK_CP_FIELD_LEN_CUR		CONSTANT VARCHAR2(100)		:= 'Count the Field_Length';
VAL_WRITE_HEADER			CONSTANT VARCHAR2(100)		:= 'Write header to file';
VAL_WRITE_INFO				CONSTANT VARCHAR2(100)		:= 'Write to output file';


/*cursor , INTF out bound look up*/
CURSOR  CP_FIELD_LENGTH_CURSOR(P_TRANS_CODE VARCHAR2)
    IS
SELECT  FIELD_LENGTH_NO,ROWID
  FROM  CP_INTF_OUTBOUND_LOOKUP
 WHERE  FILE_INDICATOR = P_TRANS_CODE
ORDER BY  SEQUENCE_NO;

/* CURSOR  RET_PRI_HIST_CURSOR
	IS
SELECT	hp.SCHOOL_CODE,
		hp.LEVEL_XCODE,
		ag.ACADEMIC_YEAR,
		sp.UIN_FIN_NO,
		ag.EASS_OVERALL_PERCENTAGES_NO,
		NVL(SUM(DECODE(mk.absent_icode_1, VAL_MC, 1, VAL_VR, 1, 0)), 0)    count_VR_MC
FROM	CP_STUD_HIST_RESULTS ag,
		CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp,
		CP_STUD_HIST_RESULT_DTLS mk
WHERE	sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.LEVEL_XCODE IN (VAL_LEVEL_CODE_PRI_2,VAL_LEVEL_CODE_PRI_3,VAL_LEVEL_CODE_PRI_4,VAL_LEVEL_CODE_PRI_5,VAL_LEVEL_CODE_PRI_6)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND ag.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.eass_overall_percentages_no IS NOT NULL
		AND mk.ACADEMIC_YEAR = VAL_PREV_YEAR					-- Get previous year mark details
		AND mk.STUDENT_ID = sp.STUDENT_ID
		AND mk.SUBJECT_LEVEL_XCODE = hp.LEVEL_XCODE
		AND mk.SUBJECT_STREAM_XCODE = hp.STREAM_XCODE
		AND mk.SUBJECT_ACTIVE_IND = VAL_SUBJECT_ACTIVE_IND
		AND mk.SCHOOL_CODE = hp.SCHOOL_CODE
		AND  (mk.subject_code, mk.subject_level_xcode, mk.subject_stream_xcode) IN
		(SELECT od.subject_code, od.level_xcode, od.stream_xcode
		FROM CP_CUR_SCHOOL_SUBJECT od
		WHERE od.subject_school_code = hp.SCHOOL_CODE
		AND od.examinable_ind = 'Y')
		GROUP BY sp.uin_fin_no, ag.eass_overall_percentages_no, ag.academic_year,
				 hp.school_code, hp.LEVEL_XCODE
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO; */

--- corrected query ---
CURSOR  RET_PRI_HIST_CURSOR
	IS
SELECT	hp.SCHOOL_CODE,
		hp.LEVEL_XCODE,
		ag.ACADEMIC_YEAR,
		sp.UIN_FIN_NO,
		ag.EASS_OVERALL_PERCENTAGES_NO,
/*START <MOD-002>*/
		NVL(SUM(DECODE(mk.absent_icode, VAL_MC, 1, VAL_VR, 1, 0)), 0)    count_VR_MC
FROM	CP_STUD_HIST_RES_AGGREGATES ag,
		CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp,
		CP_STUD_HIST_RES_MARKS mk
/*END <MOD-002>*/
WHERE	sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.level_xcode NOT IN (VAL_LEVEL_CODE_PRI_1)
		AND hp.LEVEL_XCODE IN (VAL_LEVEL_CODE_PRI_1,VAL_LEVEL_CODE_PRI_2,VAL_LEVEL_CODE_PRI_3,VAL_LEVEL_CODE_PRI_4,VAL_LEVEL_CODE_PRI_5)--,VAL_LEVEL_CODE_PRI_6)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND sp.level_xcode <> hp.level_xcode -- not to pickup repeate students
		AND hp.student_id=ag.student_id
		AND hp.academic_year=ag.academic_year
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.eass_overall_percentages_no IS NOT NULL
		AND hp.academic_year=mk.academic_year
		AND mk.STUDENT_ID = hp.STUDENT_ID
		AND mk.STUDENT_ID = sp.STUDENT_ID
		AND MK.SUBJECT_LEVEL_XCODE = HP.LEVEL_XCODE
		--AND mk.SUBJECT_STREAM_XCODE = hp.STREAM_XCODE
		AND MK.SUBJECT_ACTIVE_IND = VAL_SUBJECT_ACTIVE_IND
		AND mk.result_type_icode=VAL_RESULT_TYPE_ICODE
/*START <MOD-003>*/
		--AND mk.SCHOOL_CODE = hp.SCHOOL_CODE
		--AND ag.school_code = hp.school_code
/*START <MOD-003>*/
		AND (mk.subject_code) IN --, mk.subject_level_xcode, mk.subject_stream_xcode) IN
			(SELECT od.subject_code --, od.level_xcode, od.stream_xcode
/*START <MOD-004>*/
				 FROM CP_CUR_SCHOOL_HIST_SUBJ od
/*END <MOD-004>*/
				 WHERE od.subject_school_code = hp.SCHOOL_CODE
				 --AND od.level_xcode= hp.level_xcode
				 AND od.level_xcode  = mk.subject_level_xcode 		   -- added newly to cater for outof stream subjects
				 AND od.stream_xcode = mk.SUBJECT_STREAM_XCODE 		   -- added newly to cater for outof stream subjects
				 AND od.examinable_ind = 'Y')
		GROUP BY sp.uin_fin_no, ag.eass_overall_percentages_no,ag.academic_year,hp.school_code,hp.LEVEL_XCODE
		--HAVING NVL(SUM(DECODE(mk.absent_icode_1, VAL_MC, 1, VAL_VR, 1, 0)), 0)  <= 1
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO;

--- upto this ---

/*CURSOR	RET_SEC_HIST_CURSOR
	IS
SELECT  hp.SCHOOL_CODE,
		hp.LEVEL_XCODE,
		sp.UIN_FIN_NO,
		ag.ACADEMIC_YEAR,
		ag.EASS_OVERALL_PERCENTAGES_NO
		--ag.PASS_IND
  FROM  CP_STUD_HIST_RESULTS ag,
        CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE  sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.LEVEL_XCODE IN (VAL_LEVEL_CODE_SEC_2,VAL_LEVEL_CODE_SEC_3,VAL_LEVEL_CODE_SEC_4)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND ag.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.eass_overall_percentages_no IS NOT NULL
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO; */
-- Corrected query ---
CURSOR	RET_SEC_HIST_CURSOR
	IS
SELECT  hp.SCHOOL_CODE,
		hp.LEVEL_XCODE,
		sp.UIN_FIN_NO,
		ag.ACADEMIC_YEAR,
		ag.EASS_OVERALL_PERCENTAGES_NO
/*START <MOD-005>*/
  FROM  CP_STUD_HIST_RES_AGGREGATES ag,
/*END <MOD-005>*/
        CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE  sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.level_xcode NOT IN (VAL_LEVEL_CODE_SEC_1,VAL_LEVEL_CODE_SEC_5)
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.LEVEL_XCODE IN (VAL_LEVEL_CODE_SEC_1,VAL_LEVEL_CODE_SEC_2,VAL_LEVEL_CODE_SEC_3,VAL_LEVEL_CODE_SEC_4,VAL_LEVEL_CODE_SEC_5)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND sp.level_xcode <> hp.level_xcode -- not to pickup repeate students
		AND ag.STUDENT_ID = sp.STUDENT_ID
        AND hp.student_id=ag.student_id
		AND hp.academic_year=ag.academic_year
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.eass_overall_percentages_no IS NOT NULL
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO;
-- upto this --

/*CURSOR	RET_SEC_HIST_COUNT_CURSOR
	IS
SELECT  COUNT(sp.uin_fin_no)
  FROM  CP_STUD_HIST_RESULTS ag,
        CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE  sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.LEVEL_XCODE IN (VAL_LEVEL_CODE_SEC_2,VAL_LEVEL_CODE_SEC_3,VAL_LEVEL_CODE_SEC_4)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND ag.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.eass_overall_percentages_no IS NOT NULL
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO; */

-- Corrected query ---
CURSOR	RET_SEC_HIST_COUNT_CURSOR
	IS
SELECT  COUNT(sp.uin_fin_no)
/*START <MOD-006>*/
  FROM  CP_STUD_HIST_RES_AGGREGATES ag,
/*START <MOD-006>*/
        CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE  sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.level_xcode NOT IN (VAL_LEVEL_CODE_SEC_1,VAL_LEVEL_CODE_SEC_5)
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.LEVEL_XCODE IN (VAL_LEVEL_CODE_SEC_1,VAL_LEVEL_CODE_SEC_2,VAL_LEVEL_CODE_SEC_3,VAL_LEVEL_CODE_SEC_4,VAL_LEVEL_CODE_SEC_5)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND sp.level_xcode <> hp.level_xcode -- not to pickup repeate students
		AND ag.STUDENT_ID = sp.STUDENT_ID
        AND hp.student_id=ag.student_id
		AND hp.academic_year=ag.academic_year
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.eass_overall_percentages_no IS NOT NULL;
-- upto this --

/*CURSOR  RET_JCCI_HIST_CURSOR
    IS
SELECT	hp.SCHOOL_CODE,
		hp.LEVEL_XCODE,
		sp.UIN_FIN_NO,
		TO_CHAR(NVL(SUM(DECODE(mk.grade_name_1, VAL_GRADE_A, 1, 0)), 0))    count_grade_a,
		TO_CHAR(NVL(SUM(DECODE(mk.grade_name_1, VAL_GRADE_B, 1, 0)), 0))    count_grade_b,
		ag.ACADEMIC_YEAR,
		ag.RANKING_POINTS_NO
		--ag.ACADAWARD_ELIGIBILITY_IND
 FROM	CP_STUD_HIST_RESULTS ag,
		CP_STUD_HIST_RESULT_DTLS mk,
		CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE	sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.LEVEL_XCODE IN (VAL_LEVEL_CODE_JC_1,VAL_LEVEL_CODE_JC_2,VAL_LEVEL_CODE_JC_3)   -- LEVEL CODE IN ('41','42','43')
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND ag.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.RANKING_POINTS_NO IS NOT NULL
		AND mk.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND mk.STUDENT_ID = sp.STUDENT_ID
		AND (mk.subject_code, mk.subject_level_xcode, mk.subject_stream_xcode) IN
			(SELECT od.subject_code, od.level_xcode, od.stream_xcode
			FROM CP_SUBJ_LEVEL_STREAM od
			WHERE od.subject_level_icode = '01')
		AND mk.SUBJECT_ACTIVE_IND = VAL_SUBJECT_ACTIVE_IND
		AND mk.SCHOOL_CODE = hp.SCHOOL_CODE
		AND  (mk.subject_code, mk.subject_level_xcode, mk.subject_stream_xcode) IN
		(SELECT od1.subject_code, od1.level_xcode, od1.stream_xcode
		FROM CP_CUR_SCHOOL_SUBJECT od1
		WHERE od1.subject_school_code = hp.SCHOOL_CODE
		AND od1.examinable_ind = 'Y')
		GROUP BY sp.uin_fin_no, hp.school_code, hp.level_xcode, --rm.OV_OVERALL_CONDUCT_CODE,
		ag.academic_year, ag.RANKING_POINTS_NO, ag.ACADAWARD_ELIGIBILITY_IND
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO; */
-- correceted query --
CURSOR  RET_JCCI_HIST_CURSOR
    IS
SELECT	hp.SCHOOL_CODE,
		hp.LEVEL_XCODE,
		sp.UIN_FIN_NO,
/*START <MOD-007>*/
		TO_CHAR(NVL(SUM(DECODE(mk.grade_name, VAL_GRADE_A, 1, 0)), 0))    count_grade_a,
		TO_CHAR(NVL(SUM(DECODE(mk.grade_name, VAL_GRADE_B, 1, 0)), 0))    count_grade_b,
/*END <MOD-007>*/
        	ag.ACADEMIC_YEAR,
		ag.RANKING_POINTS_NO
/*START <MOD-008>*/
 FROM	CP_STUD_HIST_RES_AGGREGATES ag,
		CP_STUD_HIST_RES_MARKS mk,
/*END <MOD-008>*/
		CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE	sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND hp.LEVEL_XCODE IN (VAL_LEVEL_CODE_JC_1,VAL_LEVEL_CODE_JC_2) --,VAL_LEVEL_CODE_JC_3)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND sp.level_xcode <> hp.level_xcode -- not to pickup repeate students
        AND hp.student_id=ag.student_id
		AND hp.academic_year=ag.academic_year
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND mk.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.RANKING_POINTS_NO IS NOT NULL
		AND hp.academic_year=mk.academic_year
		AND mk.STUDENT_ID = hp.STUDENT_ID
		AND mk.STUDENT_ID = sp.STUDENT_ID
		AND mk.SUBJECT_ACTIVE_IND = VAL_SUBJECT_ACTIVE_IND
/*START <MOD-009>*/
		--AND mk.SCHOOL_CODE = hp.SCHOOL_CODE
		--AND ag.school_code = hp.school_code
/*END <MOD-009>*/
		AND (mk.subject_code) IN --, mk.subject_level_xcode, mk.subject_stream_xcode) IN
			(SELECT od.subject_code --, od.level_xcode, od.stream_xcode
				FROM CP_SUBJ_LEVEL_STREAM od
				WHERE od.subject_level_icode = DECODE(hp.new_jcci_cur_ind,'Y','08','01') -- To cater for the new JCCI curriculum
				--AND od.level_xcode= hp.level_xcode
				AND od.level_xcode = mk.subject_level_xcode	  -- added newly to cater for outof stream subjects
				AND od.stream_xcode = mk.SUBJECT_STREAM_XCODE)-- added newly to cater for outof stream subjects
		AND (mk.subject_code) IN  --, mk.subject_level_xcode, mk.subject_stream_xcode) IN
			(SELECT od1.subject_code --, od1.level_xcode, od1.stream_xcode
/*START <MOD-010>*/
				FROM CP_CUR_SCHOOL_HIST_SUBJ od1
/*END <MOD-010>*/
				WHERE od1.subject_school_code = hp.SCHOOL_CODE
				AND od1.examinable_ind = 'Y'
				--AND od1.level_xcode= hp.level_xcode
				AND od1.level_xcode = mk.subject_level_xcode	-- added newly to cater for outof stream subjects
				AND od1.stream_xcode = mk.SUBJECT_STREAM_XCODE) -- added newly to cater for outof stream subjects
		GROUP BY sp.uin_fin_no, hp.school_code, hp.level_xcode,ag.academic_year, ag.RANKING_POINTS_NO, ag.ACADAWARD_ELIGIBILITY_IND
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO;
-- Upto this --

/*CURSOR  RET_JCCI_HIST_COUNT_CURSOR
    IS
SELECT	NVL(SUM(COUNT(DISTINCT sp.uin_fin_no)),0)
 FROM	CP_STUD_HIST_RESULTS ag,
		CP_STUD_HIST_RESULT_DTLS mk,
		CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE	sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND sp.LEVEL_XCODE IN (VAL_LEVEL_CODE_JC_1,VAL_LEVEL_CODE_JC_2,VAL_LEVEL_CODE_JC_3)   -- LEVEL CODE IN ('41','42','43')
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND ag.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.RANKING_POINTS_NO IS NOT NULL
		AND mk.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND mk.STUDENT_ID = sp.STUDENT_ID
		AND (mk.subject_code, mk.subject_level_xcode, mk.subject_stream_xcode) IN
			(SELECT od.subject_code, od.level_xcode, od.stream_xcode
			FROM CP_SUBJ_LEVEL_STREAM od
			WHERE od.subject_level_icode = '01')
		AND mk.SUBJECT_ACTIVE_IND = VAL_SUBJECT_ACTIVE_IND
		AND mk.SCHOOL_CODE = hp.SCHOOL_CODE
		AND  (mk.subject_code, mk.subject_level_xcode, mk.subject_stream_xcode) IN
		(SELECT od1.subject_code, od1.level_xcode, od1.stream_xcode
		FROM CP_CUR_SCHOOL_SUBJECT od1
		WHERE od1.subject_school_code = hp.SCHOOL_CODE
		AND od1.examinable_ind = 'Y')
		GROUP BY sp.uin_fin_no, hp.school_code, hp.level_xcode, --rm.OV_OVERALL_CONDUCT_CODE,
		ag.academic_year, ag.RANKING_POINTS_NO, ag.ACADAWARD_ELIGIBILITY_IND
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO; */
-- correceted query --
CURSOR  RET_JCCI_HIST_COUNT_CURSOR
    IS
SELECT	NVL(SUM(COUNT(DISTINCT sp.uin_fin_no)),0)
/*START <MOD-011>*/
 FROM	CP_STUD_HIST_RES_AGGREGATES ag,
		CP_STUD_HIST_RES_MARKS mk,
/*END <MOD-011>*/
		CP_STUD_PROFILE sp,
		CP_STUD_HIST_PROMOTION hp
 WHERE	sp.ACADEMIC_YEAR = VAL_CURRENT_YEAR
		AND hp.LEVEL_XCODE IN (VAL_LEVEL_CODE_JC_1,VAL_LEVEL_CODE_JC_2)--,VAL_LEVEL_CODE_JC_3)
		AND sp.STUDENT_STATUS_ICODE = VAL_STUDENT_STATUS_ICODE
		AND hp.ACADEMIC_YEAR = VAL_PREV_YEAR
		AND hp.STUDENT_ID = sp.STUDENT_ID
		AND sp.level_xcode <> hp.level_xcode -- not to pickup repeate students
        AND hp.student_id=ag.student_id
		AND hp.academic_year=ag.academic_year
		AND ag.STUDENT_ID = sp.STUDENT_ID
		AND ag.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND mk.RESULT_TYPE_ICODE = VAL_RESULT_TYPE_ICODE
		AND ag.RANKING_POINTS_NO IS NOT NULL
		AND hp.academic_year=mk.academic_year
		AND mk.STUDENT_ID = hp.STUDENT_ID
		AND mk.STUDENT_ID = sp.STUDENT_ID
		AND mk.SUBJECT_ACTIVE_IND = VAL_SUBJECT_ACTIVE_IND
/*START <MOD-012>*/
		--AND mk.SCHOOL_CODE = hp.SCHOOL_CODE
		--AND ag.school_code = hp.school_code
/*END <MOD-012>*/
		AND (mk.subject_code) IN --, mk.subject_level_xcode, mk.subject_stream_xcode) IN
			(SELECT od.subject_code --, od.level_xcode, od.stream_xcode
				FROM CP_SUBJ_LEVEL_STREAM od
				WHERE od.subject_level_icode = DECODE(hp.new_jcci_cur_ind,'Y','08','01') -- To cater for the new JCCI curriculum
				--AND od.level_xcode= hp.level_xcode
				AND od.level_xcode  = mk.subject_level_xcode	  -- added newly to cater for outof stream subjects
				AND od.stream_xcode = mk.SUBJECT_STREAM_XCODE)	  -- added newly to cater for outof stream subjects
		AND (mk.subject_code) IN --, mk.subject_level_xcode, mk.subject_stream_xcode) IN
			(SELECT od1.subject_code --, od1.level_xcode, od1.stream_xcode
/*START <MOD-013>*/
				FROM CP_CUR_SCHOOL_HIST_SUBJ od1
/*END <MOD-013>*/
				WHERE od1.subject_school_code = hp.SCHOOL_CODE
				AND od1.examinable_ind = 'Y'
				--AND od1.level_xcode= hp.level_xcode
				AND od1.level_xcode   = mk.subject_level_xcode	  -- added newly to cater for outof stream subjects
				AND od1.stream_xcode = mk.SUBJECT_STREAM_XCODE)	  -- added newly to cater for outof stream subjects
		GROUP BY sp.uin_fin_no, hp.school_code, hp.level_xcode,ag.academic_year, ag.RANKING_POINTS_NO, ag.ACADAWARD_ELIGIBILITY_IND
		ORDER BY hp.SCHOOL_CODE, hp.LEVEL_XCODE, sp.UIN_FIN_NO;
-- Upto this --

V_EXT_REC_FIELD_LENGTH			CP_FIELD_LENGTH_CURSOR%ROWTYPE;

BEGIN
--dbms_output.put_line('AT BEGIN');
IO_RETURN_CODE := VAL_NO_ERROR;
V_DIRECTORY    := I_BATCH_PARAM.OUTBOUND_DIR;			-- /cp1/${ENVIRONMENT}/DATA/EXTERNAL/OUTBOUND

/*Checkpoint for Batch parameter */
V_ERR_CHK_CODE := VAL_CHECK_LEVEL;						-- 'Check for Application Parameter'

/* Check input parameters if empty */
   IF (I_BATCH_PARAM.ERROR_FILE IS NULL)    OR
      (I_BATCH_PARAM.ERROR_DIR IS NULL)     OR
      (I_BATCH_PARAM.REJECT_FILE IS NULL)   OR
      (I_BATCH_PARAM.REJECT_DIR IS NULL)    OR
      (I_BATCH_PARAM.STAGE_OUT_DIR IS NULL) THEN
       V_APPLERR_PARAM.SC_ERROR_CODE  :=	 VAL_NULL_BATCH_PARAM; --'0018'
	  --dbms_output.put_line('AT IF (I_BATCH_PARAM.ERROR_FILE IS NULL)    OR');
      RAISE E_APPLERR;

   END IF;


/*Construct filename of output file */
IF V_EXTRACT_LEVEL = VAL_MAINLEVEL_PRI THEN
	V_OUT_FILENAME := VAL_PRI_FILE_NAME||VAL_TXT;		-- Creating the file name for primary school - PYXXXX.txt
	V_FIELD_PARA := VAL_TRANS_CODE_PRI;					-- FILE_INDICATOR Value that retrives primary field length
ELSIF V_EXTRACT_LEVEL = VAL_MAINLEVEL_SEC THEN
	V_OUT_FILENAME := VAL_SEC_FILE_NAME||VAL_TXT;		-- Creating the file name for primary school - SYXXXX.txt
	V_FIELD_PARA := VAL_TRANS_CODE_SEC;					-- FILE_INDICATOR Value that retrives secondary field length
ELSIF V_EXTRACT_LEVEL = VAL_MAINLEVEL_JCCI THEN
	V_OUT_FILENAME := VAL_JC_FILE_NAME||VAL_TXT;		-- Creating the file name for primary school - PUXXXX.txt
	V_FIELD_PARA := VAL_TRANS_CODE_JC;					-- FILE_INDICATOR Value that retrives JCCI field length
ELSE
--dbms_output.put_line('RAISE E_APPLERR;');
	RAISE E_APPLERR;

END IF;

/*Checkpoint before opening files */
V_ERR_CHK_CODE := VAL_OPEN_FILES;						-- 'Open Output files'

/*Open or Create Output file */
V_OUT_FILE := UTL_FILE.FOPEN(V_DIRECTORY, V_OUT_FILENAME, VAL_WRITE);

/*Checkpoint before loading FIELD_LENGTH */
V_ERR_CHK_CODE := VAL_LOAD_FIELD_LENGTHS;				-- 'Load Field lengths from INTF_OUTBOUND_LOOKUP'

V_ERR_TBL_CODE := VAL_CP_OUTBOUND;						-- 'CP_INTF_OUTBOUND_LOOKUP'
--dbms_output.put_line('AT BEFORE FOR');
/*Retrieve the Length of the fields for populating out data */
FOR V_EXT_REC_FIELD_LENGTH IN CP_FIELD_LENGTH_CURSOR(V_FIELD_PARA) LOOP
--dbms_output.put_line('AT INSIDE FOR');
BEGIN
	V_ERR_CHK_CODE := VAL_CHK_CP_FIELD_LEN_CUR;			-- 'Count the Field_Length'
	/* Reserve 1 room for array using EXTEND */
	V_FIELD_LENGTH.EXTEND(VAL_INCREMENT);
	V_FIELD_LENGTH(V_FIELD_INDEX) := V_EXT_REC_FIELD_LENGTH.FIELD_LENGTH_NO;
	V_FIELD_INDEX                 := V_FIELD_INDEX + VAL_INCREMENT;
	EXCEPTION
	WHEN OTHERS THEN
		/* Assign Application Error Handling Parameters */
		V_APPLERR_PARAM.ERROR_CODE          := TO_CHAR(SQLCODE);
		V_APPLERR_PARAM.SC_ERROR_CODE       := VAL_ERROR_RET_FIELD_LENGTH;	-- '0019'
		V_APPLERR_PARAM.BLOCKCODE           := VAL_ERR_BLK_CODE;			-- 'CP_EASA_O_PREV_YR'
		V_APPLERR_PARAM.CHKPTCODE           := V_ERR_CHK_CODE;				-- 'Count the Field_Length'
		V_APPLERR_PARAM.TBLKEYCODE          := V_ERR_TBL_CODE;				-- 'CP_INTF_OUTBOUND_LOOKUP'
		V_APPLERR_PARAM.CREATED_BY          := VAL_CREATED_BY;				-- 'INTERFACE'
--dbms_output.put_line('AT OTHERS');
		/* Call Application Handler */
		Cp_Arch_Pro_Log_Appl_Error(I_BATCH_PARAM
						   ,V_APPLERR_PARAM
						   ,V_RETURN_CODE);

		IO_RETURN_CODE := VAL_APPLICATION_ERROR;		-- 100
	END;
END LOOP;

V_HEADER_WRITE := 0;
V_REC_COUNT := 0;
/* If level to be process is Primary*/
IF V_EXTRACT_LEVEL = VAL_MAINLEVEL_PRI THEN
--dbms_output.put_line('AT = VAL_MAINLEVEL_PRI');
	/* Loop the cursor to find out the number of records that will be written to file*/
	V_ERR_CHK_CODE := VAL_GET_PRI_COUNT;				-- 'Retrieve total number of Pri student to be written on file'
	FOR TMP_RECORD IN RET_PRI_HIST_CURSOR LOOP
	--dbms_output.put_line('TMP_RECORD IN RET_PRI_HIST_CURSOR');
		IF (TMP_RECORD.count_VR_MC < VAL_VR_MC) THEN
                    V_REC_COUNT := V_REC_COUNT + VAL_INCREMENT;
		END IF;
	END LOOP;
	/* IF THERE IS RECORD TO BE WRITEN, WRITE THE HEADER */
	V_ERR_CHK_CODE := VAL_WRITE_HEADER;					-- 'Write header to file'
	IF V_REC_COUNT > 0 AND V_HEADER_WRITE = 0 THEN
	--dbms_output.put_line('V_REC_COUNT > 0 AND');
		--UTL_FILE.PUT_LINE(V_OUT_FILE, VAL_HEADER_TXT||TO_CHAR(V_REC_COUNT));-- 'Total Number of Records: '
		UTL_FILE.PUT_LINE(V_OUT_FILE, TO_CHAR(V_REC_COUNT));
		V_HEADER_WRITE:= 1;								-- Header writtem on file
	END IF;

	/* If header is written on file, start to write the content on file */
	IF V_HEADER_WRITE = 1 THEN
		FOR TMP_RECORD IN RET_PRI_HIST_CURSOR LOOP
	--		dbms_output.put_line('TMP_RECORD IN RET_PRI_HIST_CURSOR');
			/* Filter out those record with more than or equal 2 VR_MC */
			IF (TMP_RECORD.count_VR_MC < VAL_VR_MC) THEN
				V_FILE_INFO:=
				NVL(RPAD(TMP_RECORD.SCHOOL_CODE,				V_FIELD_LENGTH(1),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(1)))||
				NVL(RPAD(TMP_RECORD.LEVEL_XCODE,				V_FIELD_LENGTH(2),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(2)))||
				NVL(RPAD(TMP_RECORD.ACADEMIC_YEAR,				V_FIELD_LENGTH(3),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(3)))||
				NVL(RPAD(TMP_RECORD.UIN_FIN_NO,					V_FIELD_LENGTH(4),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(4)))||
				NVL(RPAD(TMP_RECORD.EASS_OVERALL_PERCENTAGES_NO,V_FIELD_LENGTH(5),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(5)));--||
				--NVL(RPAD(TMP_RECORD.S2_OVERALL_CONDUCT_CODE,	V_FIELD_LENGTH(6),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(6)));

				/*Checkpoint before writing into output file */
				V_ERR_CHK_CODE := VAL_WRITE_INFO;		-- 'Write to output file'

				/* Write buffer into file */
				 UTL_FILE.PUT_LINE(V_OUT_FILE, V_FILE_INFO);

			END IF;
		END LOOP;
		UTL_FILE.PUT(V_OUT_FILE, VAL_FOOTER_TXT);	-- '--END OF FILE--'
	END IF;
/* If level to be process is Secondary */
ELSIF V_EXTRACT_LEVEL = VAL_MAINLEVEL_SEC THEN
	--		dbms_output.put_line('V_EXTRACT_LEVEL = VAL_MAINLEVEL_SEC');
	V_ERR_CHK_CODE := VAL_GET_SEC_COUNT;				-- 'Retrieve total number of Sec student to be written on file'
	OPEN RET_SEC_HIST_COUNT_CURSOR;
	FETCH RET_SEC_HIST_COUNT_CURSOR INTO V_REC_COUNT;
	IF NOT RET_SEC_HIST_COUNT_CURSOR%ISOPEN THEN
		CLOSE RET_SEC_HIST_COUNT_CURSOR;
		V_RET_CODE := SQLCODE;
		RAISE APPL_ERROR;
	ELSIF RET_SEC_HIST_COUNT_CURSOR%NOTFOUND THEN
		CLOSE RET_SEC_HIST_COUNT_CURSOR;
		V_RET_CODE := VAL_APPLICATION_ERROR;		-- 100
		RAISE APPL_ERROR;
	END IF;
	CLOSE RET_SEC_HIST_COUNT_CURSOR;
	/* IF THERE IS RECORD TO BE WRITEN, WRITE THE HEADER */
	V_ERR_CHK_CODE := VAL_WRITE_HEADER;					-- 'Write header to file'
	IF V_REC_COUNT > 0 AND V_HEADER_WRITE = 0 THEN
		--UTL_FILE.PUT_LINE(V_OUT_FILE, VAL_HEADER_TXT||TO_CHAR(V_REC_COUNT));-- 'Total Number of Records: '
		UTL_FILE.PUT_LINE(V_OUT_FILE, TO_CHAR(V_REC_COUNT));
		V_HEADER_WRITE:= 1;
	END IF;
	/* If header is written on file, start to write the content on file */
	IF V_HEADER_WRITE = 1 THEN
		FOR TMP_RECORD IN RET_SEC_HIST_CURSOR LOOP
	--		dbms_output.put_line('TMP_RECORD IN RET_SEC_HIST_CURSOR');
			V_FILE_INFO:=
			NVL(RPAD(TMP_RECORD.SCHOOL_CODE,				V_FIELD_LENGTH(1),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(1)))||
			NVL(RPAD(TMP_RECORD.LEVEL_XCODE,				V_FIELD_LENGTH(2),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(2)))||
			NVL(RPAD(TMP_RECORD.ACADEMIC_YEAR,				V_FIELD_LENGTH(3),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(3)))||
			NVL(RPAD(TMP_RECORD.UIN_FIN_NO,					V_FIELD_LENGTH(4),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(4)))||
			NVL(RPAD(TMP_RECORD.EASS_OVERALL_PERCENTAGES_NO,V_FIELD_LENGTH(5),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(5)));--||
			--NVL(RPAD(TMP_RECORD.PASS_IND,					V_FIELD_LENGTH(6),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(6)));--||
			--NVL(RPAD(TMP_RECORD.S2_OVERALL_CONDUCT_CODE,	V_FIELD_LENGTH(7),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(7)));

			/*Checkpoint before writing into output file */
			V_ERR_CHK_CODE := VAL_WRITE_INFO;			-- 'Write to output file'

			/* Write buffer into file */
			 UTL_FILE.PUT_LINE(V_OUT_FILE, V_FILE_INFO);

		END LOOP;
		UTL_FILE.PUT(V_OUT_FILE, VAL_FOOTER_TXT);	-- '--END OF FILE--'
	END IF;
/* If level to be process is JCCI */
ELSIF V_EXTRACT_LEVEL = VAL_MAINLEVEL_JCCI THEN
		---	dbms_output.put_line('V_EXTRACT_LEVEL = VAL_MAINLEVEL_JCCI');
	V_ERR_CHK_CODE := VAL_GET_JC_COUNT;					-- 'Retrieve total number of JCs student to be written on file'
	OPEN RET_JCCI_HIST_COUNT_CURSOR;
	FETCH RET_JCCI_HIST_COUNT_CURSOR INTO V_REC_COUNT;
	IF NOT RET_JCCI_HIST_COUNT_CURSOR%ISOPEN THEN
		CLOSE RET_JCCI_HIST_COUNT_CURSOR;
		V_RET_CODE := SQLCODE;
		RAISE APPL_ERROR;
	ELSIF RET_JCCI_HIST_COUNT_CURSOR%NOTFOUND THEN
		CLOSE RET_JCCI_HIST_COUNT_CURSOR;
		V_RET_CODE := VAL_APPLICATION_ERROR;		-- 100
		RAISE APPL_ERROR;

	END IF;
	CLOSE RET_JCCI_HIST_COUNT_CURSOR;
	/* IF THERE IS RECORD TO BE WRITEN, WRITE THE HEADER */
	IF V_REC_COUNT > 0 AND V_HEADER_WRITE = 0 THEN
	--		dbms_output.put_line('V_REC_COUNT > 0 AND V_HEADER_WRITE');
		--UTL_FILE.PUT_LINE(V_OUT_FILE, VAL_HEADER_TXT||TO_CHAR(V_REC_COUNT));-- 'Total Number of Records: '
		UTL_FILE.PUT_LINE(V_OUT_FILE, TO_CHAR(V_REC_COUNT));
		V_HEADER_WRITE:= 1;
	END IF;
	/* If header is written on file, start to write the content on file */
	IF V_HEADER_WRITE = 1 THEN
		FOR TMP_RECORD IN RET_JCCI_HIST_CURSOR LOOP
	--		dbms_output.put_line('FOR TMP_RECORD IN RET_JCCI_HIST_CURSOR LOOP');
			V_FILE_INFO:=
			NVL(RPAD(TMP_RECORD.SCHOOL_CODE,				V_FIELD_LENGTH(1),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(1)))||
			NVL(RPAD(TMP_RECORD.LEVEL_XCODE,				V_FIELD_LENGTH(2),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(2)))||
			NVL(RPAD(TMP_RECORD.ACADEMIC_YEAR,				V_FIELD_LENGTH(3),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(3)))||
			NVL(RPAD(TMP_RECORD.UIN_FIN_NO,					V_FIELD_LENGTH(4),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(4)))||
			NVL(RPAD(TMP_RECORD.RANKING_POINTS_NO,			V_FIELD_LENGTH(5),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(5)))||
			NVL(RPAD(TMP_RECORD.count_grade_a,				V_FIELD_LENGTH(6),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(6)))||
			NVL(RPAD(TMP_RECORD.count_grade_b,				V_FIELD_LENGTH(7),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(7)));--||
			--NVL(RPAD(TMP_RECORD.OV_OVERALL_CONDUCT_CODE,	V_FIELD_LENGTH(8),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(8)))||
			--NVL(RPAD(TMP_RECORD.ACADAWARD_ELIGIBILITY_IND,	V_FIELD_LENGTH(8),VAL_RPAD_SPACE),RPAD(VAL_RPAD_SPACE,V_FIELD_LENGTH(8)));

			/*Checkpoint before writing into output file */
			V_ERR_CHK_CODE := VAL_WRITE_INFO;			-- 'Write to output file'

			/* Write buffer into file */
			 UTL_FILE.PUT_LINE(V_OUT_FILE, V_FILE_INFO);

		END LOOP;
		UTL_FILE.PUT(V_OUT_FILE, VAL_FOOTER_TXT);	-- '--END OF FILE--'
	END IF;
END IF;


/*Checkpoint before closing files */
V_ERR_CHK_CODE := VAL_CLOSE_OUT_FILE;					-- 'Close Output file'
UTL_FILE.FFLUSH(V_OUT_FILE);
UTL_FILE.FCLOSE(V_OUT_FILE);
EXCEPTION
WHEN E_APPLERR THEN
	dbms_output.put_line('E_APPLERR' || TO_CHAR(SQLCODE));  dbms_output.put_line('m3');
	V_APPLERR_PARAM.ERROR_CODE         := TO_CHAR(SQLCODE);
	V_APPLERR_PARAM.BLOCKCODE          := VAL_ERR_BLK_CODE; 			-- 'CP_EASA_O_PREV_YR'
	V_APPLERR_PARAM.CHKPTCODE          := V_ERR_CHK_CODE;
	V_APPLERR_PARAM.TBLKEYCODE         := V_ERR_TBL_CODE;				-- 'CP_INTF_OUTBOUND_LOOKUP'
	V_APPLERR_PARAM.CREATED_BY         := VAL_CREATED_BY;				-- 'INTERFACE'

	/* Call Application Handler */
	Cp_Arch_Pro_Log_Appl_Error(I_BATCH_PARAM
						  ,V_APPLERR_PARAM
						  ,V_RETURN_CODE);

	/* Set IO_RETURN_CODE to ERROR */
	IO_RETURN_CODE := VAL_APPLICATION_ERROR;		-- 100

WHEN APPL_ERROR THEN
	dbms_output.put_line('APPL_ERROR ');
	/* Assign Application Error Handling Parameters */
	V_APPLERR_PARAM.ERROR_CODE          := TO_CHAR(V_RET_CODE);
	V_APPLERR_PARAM.BLOCKCODE           := VAL_ERR_BLK_CODE;				-- 'CP_EASA_O_PREV_YR'
	V_APPLERR_PARAM.CHKPTCODE           := V_ERR_CHK_CODE;
	--V_APPLERR_PARAM.TBLKEYCODE          := V_ERR_TBL_CODE;
	V_APPLERR_PARAM.CREATED_BY          := VAL_CREATED_BY;					-- 'INTERFACE'

	/* Call Application Handler */
	Cp_Arch_Pro_Log_Appl_Error(I_BATCH_PARAM
					   ,V_APPLERR_PARAM
					   ,V_RETURN_CODE);

	IO_RETURN_CODE := VAL_APPLICATION_ERROR;		-- 100

WHEN OTHERS THEN
	dbms_output.put_line('WHEN OTHERS THEN ');
	V_APPLERR_PARAM.ERROR_CODE         := TO_CHAR(SQLCODE);
	V_APPLERR_PARAM.BLOCKCODE          := VAL_ERR_BLK_CODE;					-- 'CP_EASA_O_PREV_YR'
	V_APPLERR_PARAM.CHKPTCODE          := V_ERR_CHK_CODE;
	V_APPLERR_PARAM.CREATED_BY         := VAL_CREATED_BY;					-- 'INTERFACE'

	/* Call Application Handler */
	Cp_Arch_Pro_Log_Appl_Error(I_BATCH_PARAM
					   ,V_APPLERR_PARAM
					   ,V_RETURN_CODE);

			/*  Close all utl files */
		IF UTL_FILE.IS_OPEN(V_OUT_FILE) THEN
			   UTL_FILE.FCLOSE(V_OUT_FILE);
		END IF;

		/*close cursors if any open*/
		IF CP_FIELD_LENGTH_CURSOR%ISOPEN THEN
			CLOSE CP_FIELD_LENGTH_CURSOR;
		END IF;

		IF RET_PRI_HIST_CURSOR%ISOPEN THEN
			CLOSE RET_PRI_HIST_CURSOR;
		END IF;

		IF RET_SEC_HIST_CURSOR%ISOPEN THEN
			CLOSE RET_SEC_HIST_CURSOR;
		END IF;

		IF RET_JCCI_HIST_CURSOR%ISOPEN THEN
			CLOSE RET_JCCI_HIST_CURSOR;
		END IF;
		IF RET_SEC_HIST_COUNT_CURSOR%ISOPEN THEN
			CLOSE RET_SEC_HIST_COUNT_CURSOR;
		END IF;
		IF RET_JCCI_HIST_COUNT_CURSOR%ISOPEN THEN
			CLOSE RET_JCCI_HIST_COUNT_CURSOR;
		END IF;

		/* Set IO_RETURN_CODE to ERROR */
		IO_RETURN_CODE := VAL_APPLICATION_ERROR;	-- 100

END Cp_Easa_O_Prev_Yr;

 
